//HintName: TestC3.g.cs
// This file was generated by the Remotr.SourceGen HandlerAttributeGenerator.

using System;
using System.Threading.Tasks;
using Remotr;

namespace GenericsGenerationTest;

public class TestC3 : RootCommandHandler<ITestAggregate, int, double>
{
    public override async Task<double> Execute(int input)
    {
        return await CommandFactory.GetEntity<GenericsGenerationTest.TestState>()
            .Tell<TestCommand3Type<GenericsGenerationTest.TestState, int, double>, int, double>(input)
            .Run(GetRootKeyString());
    }
}

public static class ITestAggregateTestC3Extensions
{
        public static IGrainCommandBuilder<GenericsGenerationTest.ITestAggregate, BaseRootCommandHandler<GenericsGenerationTest.ITestAggregate>, BaseRootQueryHandler<GenericsGenerationTest.ITestAggregate>, double> TestC3(this IGrainCommandBaseBuilder<GenericsGenerationTest.ITestAggregate, BaseRootCommandHandler<GenericsGenerationTest.ITestAggregate>, BaseRootQueryHandler<GenericsGenerationTest.ITestAggregate>> builder, int input)
        {
            return builder.Tell<TestC3, int, double>(input);
        }

        public static IGrainCommandBuilder<GenericsGenerationTest.ITestAggregate, BaseRootCommandHandler<GenericsGenerationTest.ITestAggregate>, BaseRootQueryHandler<GenericsGenerationTest.ITestAggregate>, double> TestC3<T>(this IGrainCommandBuilder<GenericsGenerationTest.ITestAggregate, BaseRootCommandHandler<GenericsGenerationTest.ITestAggregate>, BaseRootQueryHandler<GenericsGenerationTest.ITestAggregate>, T> builder, int input)
        {
            return builder.Tell<TestC3, int, double>(input);
        }

        public static IGrainCommandBuilder<GenericsGenerationTest.ITestAggregate, BaseRootCommandHandler<GenericsGenerationTest.ITestAggregate>, BaseRootQueryHandler<GenericsGenerationTest.ITestAggregate>, double> ThenTestC3(this IGrainCommandBuilder<GenericsGenerationTest.ITestAggregate, BaseRootCommandHandler<GenericsGenerationTest.ITestAggregate>, BaseRootQueryHandler<GenericsGenerationTest.ITestAggregate>, int> builder)
        {
            return builder.ThenTell<TestC3, double>();
        }
}
