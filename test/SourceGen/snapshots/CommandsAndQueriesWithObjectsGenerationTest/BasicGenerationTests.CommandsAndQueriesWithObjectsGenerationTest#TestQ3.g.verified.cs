//HintName: TestQ3.g.cs
// This file was generated by the Remotr.SourceGen HandlerAttributeGenerator.

using System;
using System.Threading.Tasks;
using Remotr;

namespace CommandsAndQueriesWithObjectsGenerationTest;

public class TestQ3 : RootQueryHandler<ITestAggregate, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>
{
    public override async Task<CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject> Execute(CommandsAndQueriesWithObjectsGenerationTest.TestInputObject input)
    {
        return await QueryFactory.GetEntity<CommandsAndQueriesWithObjectsGenerationTest.TestState>()
            .Ask<TestQuery3Type, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>(input)
            .Run(GetRootKeyString());
    }
}

public static class ITestAggregateTestQ3Extensions
{
        public static IGrainQueryBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject> TestQ3(this IGrainQueryBaseBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>> builder, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject input)
        {
            return builder.Ask<TestQ3, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>(input);
        }

        public static IGrainQueryBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject> TestQ3<T>(this IGrainQueryBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, T> builder, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject input)
        {
            return builder.Ask<TestQ3, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>(input);
        }

        public static IGrainQueryBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject> ThenTestQ3(this IGrainQueryBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject> builder)
        {
            return builder.ThenAsk<TestQ3, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>();
        }

        public static IGrainCommandBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootCommandHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject> TestQ3(this IGrainCommandBaseBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootCommandHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>> builder, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject input)
        {
            return builder.Ask<TestQ3, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>(input);
        }

        public static IGrainCommandBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootCommandHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject> TestQ3<T>(this IGrainCommandBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootCommandHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, T> builder, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject input)
        {
            return builder.Ask<TestQ3, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>(input);
        }

        public static IGrainCommandBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootCommandHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject> ThenTestQ3(this IGrainCommandBuilder<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate, BaseRootCommandHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, BaseRootQueryHandler<CommandsAndQueriesWithObjectsGenerationTest.ITestAggregate>, CommandsAndQueriesWithObjectsGenerationTest.TestInputObject> builder)
        {
            return builder.ThenAsk<TestQ3, CommandsAndQueriesWithObjectsGenerationTest.TestOutputObject>();
        }
}
