//HintName: TestQ3.g.cs
// This file was generated by the Remotr.SourceGen HandlerAttributeGenerator.

using System;
using System.Threading.Tasks;
using Remotr;

namespace SimpleCommandsAndQueriesTest;

public class TestQ3 : RootQueryHandler<ITestAggregate, int, double>
{
    public override async Task<double> Execute(int input)
    {
        return await QueryFactory.GetEntity<SimpleCommandsAndQueriesTest.TestState>()
            .Ask<TestQuery3Type, int, double>(input)
            .Run(GetRootKeyString());
    }
}

public static class ITestAggregateTestQ3Extensions
{
        public static IGrainQueryBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, double> TestQ3(this IGrainQueryBaseBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>> builder, int input)
        {
            return builder.Ask<TestQ3, int, double>(input);
        }

        public static IGrainQueryBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, double> TestQ3<T>(this IGrainQueryBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, T> builder, int input)
        {
            return builder.Ask<TestQ3, int, double>(input);
        }

        public static IGrainQueryBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, double> ThenTestQ3(this IGrainQueryBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, int> builder)
        {
            return builder.ThenAsk<TestQ3, double>();
        }

        public static IGrainCommandBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootCommandHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, double> TestQ3(this IGrainCommandBaseBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootCommandHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>> builder, int input)
        {
            return builder.Ask<TestQ3, int, double>(input);
        }

        public static IGrainCommandBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootCommandHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, double> TestQ3<T>(this IGrainCommandBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootCommandHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, T> builder, int input)
        {
            return builder.Ask<TestQ3, int, double>(input);
        }

        public static IGrainCommandBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootCommandHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, double> ThenTestQ3(this IGrainCommandBuilder<SimpleCommandsAndQueriesTest.ITestAggregate, BaseRootCommandHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, BaseRootQueryHandler<SimpleCommandsAndQueriesTest.ITestAggregate>, int> builder)
        {
            return builder.ThenAsk<TestQ3, double>();
        }
}
